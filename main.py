from telegram.ext import Updater, MessageHandler, Filters
from telegram.ext import CallbackContext, CommandHandler
from telegram.ext import ConversationHandler
from telegram import ReplyKeyboardMarkup
import sqlite3
import time
import requests
import random
from settings import TOKEN


def start(update, context):
    '''–°—Ç–∞—Ä—Ç–æ–≤—ã–π –¥–∏–∞–ª–æ–≥'''
    reply_keyboard = [['/start', '/put_event'],
                      ['/print_events', '/every_morning'],
                      ['/random_picture', '/help']]  # –∫–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=False)
    # –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    update.message.reply_text('''–ü—Ä–∏–≤–µ—Ç! ‚úã
–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤''')
    update.message.reply_text(
                              "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?",
                              reply_markup=markup
                            )  # —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    return 1


def first_response(update, context):
    '''–ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å'''
    context.user_data['name'] = update.message.text  # –∑–∞–ø–∏—Å—å —Å —Å–æ–æ–±—â–µ–Ω–∏—è
    con = sqlite3.connect('events.db')  # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cur = con.cursor()
    # —Å—á–∏—Ç—ã–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ —Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    result = cur.execute(f'''SELECT inform FROM name_and_animal
                            WHERE id = "1"''').fetchall()
    if len(result) == 0:  # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–≤–æ–¥–∏–ª –∏–º—è –¥–æ —ç—Ç–æ–≥–æ
        # –¥–æ–±–∞–≤–∏—Ç—å –∏–º—è
        cur.execute(f'''INSERT INTO name_and_animal
                        VALUES ('1',
                                '{context.user_data['name']}')''')
    else:  # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏–ª –∏–º—è –¥–æ —ç—Ç–æ–≥–æ
        # –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏
        cur.execute(f'''UPDATE name_and_animal
SET inform = "{context.user_data['name']}" WHERE id = "1"''')
    con.commit()  # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    con.close()  # –∑–∞–∫—Ä—ã—Ç–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    update.message.reply_text(f"""–•–æ—Ä–æ—à–æ, {context.user_data['name']}!
–ê –∫–æ–≥–æ –≤—ã –±–æ–ª—å—à–µ –ª—é–±–∏—Ç–µ: –∫–æ—à–µ–∫ –∏–ª–∏ —Å–æ–±–∞–∫?
–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞: –∫–æ—à–µ–∫, —Å–æ–±–∞–∫""")  # —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    return 2


def second_response(update, context):
    try:
        # –∫–ª–∞–≤–∏—à–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        reply_keyboard = [['/start', '/put_event'],
                          ['/print_events', '/every_morning'],
                          ['/random_picture', '/help']]
        # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        markup = ReplyKeyboardMarkup(reply_keyboard,
                                     one_time_keyboard=False)
        # —Å—á–∏—Ç—ã–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        context.user_data['cat_or_dog'] = update.message.text.lower()
        if '–∫–æ—à–µ–∫' not in context.user_data['cat_or_dog'] \
           and '—Å–æ–±–∞–∫' not in context.user_data['cat_or_dog']:
            # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –Ω–µ –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º, –≤—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫—É
            raise Exception
        con = sqlite3.connect('events.db')  # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        cur = con.cursor()
        # —Å—á–∏—Ç—ã–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ –∂–∏–≤–æ—Ç–Ω–æ–º —Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        result = cur.execute(f'''SELECT inform FROM name_and_animal
WHERE id = "2"''').fetchall()
        if len(result) == 0:  # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–≤–æ–¥–∏–ª –¥–æ —ç—Ç–æ–≥–æ
            # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
            cur.execute(f'''INSERT INTO name_and_animal
VALUES ('2', '{context.user_data['cat_or_dog']}')''')
        else:  # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏–ª –¥–æ —ç—Ç–æ–≥–æ
            # –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
            cur.execute(f'''UPDATE name_and_animal
SET inform = "{context.user_data['cat_or_dog']}" WHERE id = "2"''')
        con.commit()  # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        con.close()  # –∑–∞–∫—Ä—ã—Ç–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        # –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–º–∞–Ω–¥–∞—Ö
        update.message.reply_text('''–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –º—ã –º–æ–∂–µ–º –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É! ‚úÖ
–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –¥–µ–ª–æ –≤ —Å–ø–∏—Å–æ–∫ - "/put_event" üìù
–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –¥–µ–Ω—å -
"/print_events" üëÄ
–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã —Å–ø–∏—Å–æ–∫ –¥–µ–ª –±—ã–ª –≤–∞–º –ø—Ä–∏—Å–ª–∞–Ω
–≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è -
"/every_morning" ‚è∞
–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–ª—è
–ø–æ–¥–Ω—è—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è -
"/random_picture" üåÖ
–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è –∏–ª–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –ø–æ –∂–∏–≤–æ—Ç–Ω–æ–º—É -
"/start" üê±üê∂''',
                                  reply_markup=markup
                                  )
        return ConversationHandler.END
    except Exception:  # –µ—Å–ª–∏ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ –æ—à–∏–±–∫–∞
        # –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        update.message.reply_text('''‚ùó –û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!
–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ ‚ùó''')
        return ConversationHandler.END


def stop(update, context):
    return ConversationHandler.END


def put_events(update, context):
    '''–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–µ–ª–∞'''
    # –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è
    update.message.reply_text(f"""–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –¥–µ–ª–æ –≤ —Å–ø–∏—Å–æ–∫,
–Ω–∞–ø–∏—à–∏—Ç–µ –µ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ
<–¥–µ–Ω—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD/MM/YYYY> <–≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM> <–¥–µ–ª–æ>""")
    return 1


def update_to_db(update, context):
    try:
        # –∫–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        reply_keyboard = [['/start', '/put_event'],
                          ['/print_events', '/every_morning'],
                          ['/random_picture', '/help']]
        # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        markup = ReplyKeyboardMarkup(reply_keyboard,
                                     one_time_keyboard=False)
        text = update.message.text  # —Å—á–∏—Ç—ã–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        # –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –Ω—É–∂–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç
        text = text.split()
        event = ' '.join(text[2:])  # –¥–µ–ª–æ
        time = text[1]  # –≤—Ä–µ–º—è
        day = text[0]  # –¥–∞—Ç–∞
        if ':' not in time:  # –µ—Å–ª–∏ –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            raise Exception
        if '/' not in day:  # –µ—Å–ª–∏ –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            raise Exception
        con = sqlite3.connect('events.db')  # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        cur = con.cursor()
        # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–µ–ª–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        cur.execute(f'''INSERT INTO days_and_events
VALUES ('{day}', '{time}', '{event}')''')
        con.commit()  # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        con.close()  # –∑–∞–∫—Ä—ã—Ç–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        update.message.reply_text(
                                "–û—Ç–ª–∏—á–Ω–æ! –î–µ–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ! ‚úÖ",
                                reply_markup=markup
                                )  # –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
        return ConversationHandler.END
    except Exception:  # –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
        # –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
        update.message.reply_text('''‚ùó –û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!
–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ ‚ùó''')
        return ConversationHandler.END


def print_events(update, context):
    '''–∫–∞–∫–æ–π –¥–µ–Ω—å –Ω—É–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏'''
    update.message.reply_text(f'''–°–ø–∏—Å–æ–∫ –¥–µ–ª –∫–∞–∫–æ–≥–æ –¥–Ω—è –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?
–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ <DD/MM/YYYY>''')  # —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º
    return 1


def print_into_db(update, context):
    '''–≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –¥–µ–ª'''
    try:
        # –∫–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        reply_keyboard = [['/start', '/put_event'],
                          ['/print_events', '/every_morning'],
                          ['/random_picture', '/help']]
        # –≤—ã–≤–æ–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        markup = ReplyKeyboardMarkup(reply_keyboard,
                                     one_time_keyboard=False)
        day_for_print = update.message.text  # —Å—á–∏—Ç—ã–≤–∞–Ω–∏–µ –¥–∞—Ç—ã —Å —Å–æ–æ–±—â–µ–Ω–∏—è
        if '/' not in day_for_print:  # –µ—Å–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            raise Exception
        con = sqlite3.connect('events.db')  # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        cur = con.cursor()
        # —Å—á–∏—Ç—ã–≤–∞–Ω–∏–µ –¥–µ–ª –Ω–∞ –¥–µ–Ω—å
        result = cur.execute(f'''SELECT * FROM days_and_events
                                  WHERE day = "{day_for_print}"''')
        text = [f'–°–ø–∏—Å–æ–∫ –¥–µ–ª –Ω–∞ {day_for_print} ‚úè \n']
        pod = []
        for elem in result:  # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫ –æ–±—ä–µ–∫—Ç—É –¥–ª—è –≤—ã–≤–æ–¥–∞ –¥–µ–ª
            pod.append(f"{elem[1]} - {' '.join(elem[2:])}\n")
        # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        pod = sorted(pod, key=lambda x: int(x.split(':')[0]))
        text.extend(pod)  # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É –º–∞—Å—Å–∏–≤—É –¥–ª—è –≤—ã–≤–æ–¥–∞
        update.message.reply_text(
                                ' '.join(text),
                                reply_markup=markup
                                )  # –≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞
        con.commit()  # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        con.close()  # –∑–∞–∫—Ä—ã—Ç–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        return ConversationHandler.END
    except Exception:  # –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        # –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è
        update.message.reply_text('''‚ùó –û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!
–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ ‚ùó''')
        return ConversationHandler.END


def every_morning(update, context):
    '''—Å—á–∏—Ç—ã–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏, –≤ –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏—Å–ª–∞—Ç—å'''
    update.message.reply_text('''–í–æ —Å–∫–æ–ª—å–∫–æ –≤–∞–º –ø—Ä–∏—Å–ª–∞—Ç—å –ø–ª–∞–Ω –Ω–∞ –¥–µ–Ω—å?
–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ <HH:MM>''')
    return 1


def print_for_morning(update, context):
    try:
        # –∫–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        reply_keyboard = [['/start', '/put_event'],
                          ['/print_events', '/every_morning'],
                          ['/random_picture', '/help']]
        # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        markup = ReplyKeyboardMarkup(reply_keyboard,
                                     one_time_keyboard=False)
        # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ api
        cat_request = 'https://api.thecatapi.com/v1/images/search'
        dog_request = 'https://dog.ceo/api/breeds/image/random'
        # —Å–ª–æ–≤–∞—Ä—å —Å –º–µ—Å—è—Ü–∞–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ time
        dct = {'Jan': '01', 'Feb': '02', 'Mar': '03', 'Apr': '04',
               'May': '05', 'June': '06', 'July': '07', 'Aug': '08',
               'Sept': '09', 'Oct': '10', 'Nov': '11', 'Dec': '12'}
        # –≤—Ä–µ–º—è —Å–µ–π—á–∞—Å
        time_for_check = time.asctime().split()[3]
        time_right = update.message.text  # –≤—Ä–µ–º—è –¥–ª—è –≤—ã–≤–æ–¥–∞
        if ':' not in time_right:  # –µ—Å–ª–∏ –≤ –Ω–µ–≤–µ—Ä–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            raise Exception  # –≤—ã–∑–æ–≤ –æ—à–∏–±–∫–∏
        time_for_check = time_for_check.split(':')  # –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        update.message.reply_text(
                                '–•–æ—Ä–æ—à–æ, –æ–∂–∏–¥–∞–π—Ç–µ ‚è∞',
                                reply_markup=markup
                                )  # —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–¥–∞—á–∏
        # –µ—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ –Ω–∞—Å—Ç–∞–ª–æ
        while ':'.join(time_for_check[:-1]) != time_right:
            time_for_check = time.asctime().split()[3]  # –≤—Ä–µ–º—è —Å–µ–π—á–∞—Å
            time_for_check = time_for_check.split(':')  # –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        date_for_check = []  # –º–∞—Å—Å–∏–≤ –¥–ª—è –¥–∞—Ç—ã
        date_now = time.asctime().split()[1:3]  # –¥–∞—Ç–∞ —Å–µ–π—á–∞—Å
        date_for_check.append(date_now[1])  # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–Ω—è
        date_for_check.append(dct[date_now[0]])  # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞
        year = time.asctime().split()[-1]  # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ–¥–∞
        date_for_check.append(year)  # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω—ã–π –º–∞—Å—Å–∏–≤ –¥–ª—è –¥–∞—Ç—ã
        # –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        date_for_check = '/'.join(date_for_check)
        con = sqlite3.connect('events.db')  # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        cur = con.cursor()
        # —Å—á–∏—Ç—ã–≤–∞–Ω–∏–µ –¥–µ–ª –Ω–∞ –¥–µ–Ω—å
        result = cur.execute(f'''SELECT * FROM days_and_events
                                  WHERE day =
                                  "{date_for_check}"''').fetchall()
        # —Å—á–∏—Ç—ã–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏
        name_sql = cur.execute(f'''SELECT inform FROM name_and_animal
                            WHERE id = "1"''').fetchall()
        if len(name_sql) == 0:  # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–≤–æ–¥–∏–ª –∏–º—è
            raise Exception  # –≤—ã–∑–æ–≤ –æ—à–∏–±–∫–∏
        for elem in name_sql:
            name = elem[0]  # –∑–∞–ø–∏—Å—å –∏–º–µ–Ω–∏
        # —Å—á–∏—Ç—ã–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
        animal_sql = cur.execute(f'''SELECT inform FROM name_and_animal
                                     WHERE id = "2"''').fetchall()
        if len(animal_sql) == 0:  # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±–∏—Ä–∞–ª –∂–∏–≤–æ—Ç–Ω–æ–µ
            raise Exception  # –≤—ã–∑–æ–≤ –æ—à–∏–±–∫–∏
        for elem in animal_sql:
            animal = elem[0]  # –∑–∞–ø–∏—Å—å –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
        text = [f'–ü—Ä–∏–≤–µ—Ç, {name}! ‚úã \n']  # –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        text.append(f'–°–ø–∏—Å–æ–∫ –¥–µ–ª –Ω–∞ {date_for_check} ‚úè \n')
        pod = []
        for elem in result:
            # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–µ–ª–∞ —Å —Å–ø–∏—Å–æ–∫
            pod.append(f"{elem[1]} - {' '.join(elem[2:])}\n")
        # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        pod = sorted(pod, key=lambda x: int(x.split(':')[0]))
        text.extend(pod)  # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –º–∞—Å—Å–∏–≤
        update.message.reply_text(' '.join(text))  # –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è
        if animal.lower() == '–∫–æ—à–µ–∫':  # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–ª –∫–æ—à–µ–∫
            responce = requests.get(cat_request)  # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ api
            json_responce = responce.json()  # –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ json
            toponym = json_responce[0]['url']  # url –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        elif animal.lower() == '—Å–æ–±–∞–∫':  # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–ª —Å–æ–±–∞–∫
            responce = requests.get(dog_request)  # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ api
            json_responce = responce.json()  # –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ json
            toponym = json_responce['message']  # url –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        update.message.reply_text(toponym)  # –≤—ã–≤–æ–¥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        con.commit()  # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
        con.close()  # –∑–∞–∫—Ä—ã—Ç–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        return ConversationHandler.END
    except Exception:  # –µ—Å–ª–∏ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ –æ—à–∏–±–∫–∞
        if len(name_sql) == 0:  # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–≤–µ–ª –∏–º—è
            update.message.reply_text('''‚ùó –í—ã –Ω–µ –≤–≤–µ–ª–∏ —Å–≤–æ—ë –∏–º—è!
–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É "/start" –¥–ª—è –≤–≤–µ–¥–µ–Ω–∏—è –∏–º–µ–Ω–∏ ‚ùó''')
        elif len(animal_sql) == 0:  # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤—ã–±—Ä–∞–ª –∂–∏–≤–æ—Ç–Ω–æ–≥–æ
            update.message.reply_text('''‚ùó –í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ,
–∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è! –í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É "/start" –¥–ª—è –≤–≤–µ–¥–µ–Ω–∏—è –∂–∏–≤–æ—Ç–Ω–æ–≥–æ ‚ùó''')
        else:  # –≤ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö
            update.message.reply_text('''‚ùó –û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!
–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ ‚ùó''')
        return ConversationHandler.END


def random_picture(update, context):
    '''–≤—ã–≤–æ–¥ —Å–ª—É—á–∞–π–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏'''
    try:
        con = sqlite3.connect('events.db')  # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        cur = con.cursor()
        # —Å—á–∏—Ç—ã–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        name_sql = cur.execute(f'''SELECT inform FROM name_and_animal
                            WHERE id = "1"''').fetchall()
        if len(name_sql) == 0:  # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–≤–µ–ª –∏–º—è
            raise Exception  # –≤—ã–∑–æ–≤ –æ—à–∏–±–∫–∏
        for elem in name_sql:
            name = elem[0]  # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–º–µ–Ω–∏
        # –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è
        update.message.reply_text(f"–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å, {name}! ‚ú®")
        # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ id –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ä—Ç–∏–Ω–æ–∫
        ids = [0, 1]
        ids.extend([i for i in range(1000, 1084)])
        ids.extend([j for j in range(100, 148)])
        ids.extend([w for w in range(149, 180)])
        ids.extend([q for q in range(10, 18)])
        rand_number = random.choice(ids)  # —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –æ–¥–Ω–æ–π –∏–∑ –∫–∞—Ä—Ç–∏–Ω–æ–∫
        # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ api
        request = f'https://picsum.photos/id/{rand_number}/300'
        # –∫–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        reply_keyboard = [['/start', '/put_event'],
                          ['/print_events', '/every_morning'],
                          ['/random_picture', '/help']]
        # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        markup = ReplyKeyboardMarkup(reply_keyboard,
                                     one_time_keyboard=False)
        # –≤—ã–≤–æ–¥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        update.message.reply_text(request, reply_markup=markup)
    except Exception:  # –µ—Å–ª–∏ –≤—ã–∑–≤–∞–Ω–∞ –æ—à–∏–±–∫–∞
        if len(name_sql) == 0:  # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–≤–µ–ª –∏–º—è
            update.message.reply_text('''‚ùó –ö–∞–∂–µ—Ç—Å—è, –≤—ã –∑–∞–±—ã–ª–∏ –≤–≤–µ—Å—Ç–∏ –∏–º—è.
–í—ã–∑–æ–≤–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É "/start", —á—Ç–æ–±—ã –≤–≤–µ—Å—Ç–∏ –∏–º—è ‚ùó''')
        else:  # –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
            update.message.reply_text('''‚ùó –û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!
–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ ‚ùó''')
        return ConversationHandler.END


def help_(update, context):
    '''–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–∞–Ω–¥–∞—Ö'''
    # –∫–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    reply_keyboard = [['/start', '/put_event'],
                      ['/print_events', '/every_morning'],
                      ['/random_picture', '/help']]
    # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=False)
    # –≤—ã–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è
    update.message.reply_text('''
–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –¥–µ–ª–æ –≤ —Å–ø–∏—Å–æ–∫ - "/put_event" üìù
–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –¥–µ–Ω—å -
"/print_events" üëÄ
–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã —Å–ø–∏—Å–æ–∫ –¥–µ–ª –±—ã–ª –≤–∞–º –ø—Ä–∏—Å–ª–∞–Ω
–≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è -
"/every_morning" ‚è∞
–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É –¥–ª—è
–ø–æ–¥–Ω—è—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è -
"/random_picture" üåÖ
–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∏–º—è –∏–ª–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–µ –ø–æ –∂–∏–≤–æ—Ç–Ω–æ–º—É -
"/start" üê±üê∂''', reply_markup=markup)


def main():
    '''–æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è'''
    # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher
    # —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –¥–∏–∞–ª–æ–≥
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            1: [MessageHandler(Filters.text, first_response)],
            2: [MessageHandler(Filters.text, second_response)]
        },
        fallbacks=[CommandHandler('stop', stop)]
    )
    dp.add_handler(conv_handler)  # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥
    # –¥–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–µ–ª–∞
    make_for_put = ConversationHandler(
        entry_points=[CommandHandler('put_event', put_events)],
        states={
            1: [MessageHandler(Filters.text, update_to_db)],
        },
        fallbacks=[CommandHandler('stop', stop)]
    )
    dp.add_handler(make_for_put)  # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥
    # –¥–∏–∞–ª–æ–≥ –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –¥–µ–ª
    print_events_for_day = ConversationHandler(
        entry_points=[CommandHandler('print_events', print_events)],
        states={
            1: [MessageHandler(Filters.text, print_into_db)],
        },
        fallbacks=[CommandHandler('stop', stop)]
    )
    dp.add_handler(print_events_for_day)  # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥
    # –¥–∏–∞–ª–æ–≥ –≤—ã–≤–æ–¥–∞ —Å–ø–∏—Å–∫–∞ –¥–µ–ª –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    print_to_morning = ConversationHandler(
        entry_points=[CommandHandler('every_morning', every_morning)],
        states={
            1: [MessageHandler(Filters.text, print_for_morning)],
        },
        fallbacks=[CommandHandler('stop', stop)]
    )
    dp.add_handler(print_to_morning)  # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥
    # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å–ª—É—á–∞–π–Ω–æ–π –∫–∞—Ä—Ç–∏–Ω–∫–∏
    dp.add_handler(CommandHandler('random_picture', random_picture))
    # –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ–º–æ—â–∏
    dp.add_handler(CommandHandler('help', help_))
    updater.start_polling()
    updater.idle()


if __name__ == '__main__':
    main()  # –≤—ã–∑–æ–≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
